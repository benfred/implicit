# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - v*
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=11 --max-line-length=127 --statistics
        flake8 --filename='*.pyx,*.px*' --ignore E901,E225,E226,E227,E402,E999
    - name: Lint with black
      run: |
        black --check .
    - name: Lint with clang-format
      run: |
        sudo apt install clang-format
        find implicit | grep -E '\.(cu|cuh|h|cpp)$' | xargs clang-format --dry-run --Werror
      if: runner.os == 'Linux'
    - name: Lint with isort
      run: |
        isort -c .
    - name: Lint with codespell
      run: |
        codespell
    - name: Lint with pylint
      run: |
        pylint implicit tests benchmarks examples

  build-wheels:
    needs: [lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [36, 37, 38, 39, 310, 311]

    steps:
      - uses: actions/checkout@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_BUILD: cp${{matrix.python-version}}-*

      - name: Rename Wheels
        run: |
          python ci/rename_wheels.py
        if: runner.os == 'Linux'

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: wheelhouse

  test-wheels:
    needs: [build-wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        path: implicit_source
    - uses: actions/download-artifact@v2
      with:
        name: wheels
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r implicit_source/requirements.txt
    - name: Install h5py
      run: pip install h5py
      # skip installing h5py on python3.11, until binary wheels are supported
      # https://github.com/h5py/h5py/issues/2146
      if: ${{ matrix.python-version != '3.11' }}

    - name: Install ANN Libraries
      run: pip install annoy nmslib
      if: runner.os == 'Linux' && ${{ matrix.python-version != '3.11' }} 

    - name: Install wheel
      run: |
        pip install --force-reinstall --no-deps --no-index --find-links . implicit
    - name: Run unittests
      run: |
        python -m pytest implicit_source/tests

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [test-wheels]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Create GitHub Release
        uses: fnkr/github-action-ghr@v1.3
        env:
          GHR_PATH: .
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Push to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade wheel pip setuptools twine
          twine upload *
          rm *
